import os
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import plotly.io as pio
import plotly.colors
import numpy as np

# Read the CSV file
non_community_0_df = pd.read_csv('rep_n_relax_all_df.csv')

# Replace NaN and infinite values in 'overall_SNPs' with 0
non_community_0_df['overall_SNPs'] = non_community_0_df['overall_SNPs'].replace([np.inf, -np.inf], 0).fillna(0)

# Get unique subcommunities
subcommunities = non_community_0_df[['plasmid_1_subcommunity', 'plasmid_2_subcommunity']].melt()['value'].unique()

# Extract unique types from plasmid_1_mobtyper_orit_type(s) and plasmid_2_mobtyper_orit_type(s)
unique_oriT_types_1 = non_community_0_df['plasmid_1_mobtyper_orit_type(s)'].unique()
unique_oriT_types_2 = non_community_0_df['plasmid_2_mobtyper_orit_type(s)'].unique()

# Combine the unique types and remove duplicates
unique_oriT_types = list(set(unique_oriT_types_1).union(set(unique_oriT_types_2)))

# Create a color map for the unique oriT types using Plotly's Viridis color palette
colors = plotly.colors.sequential.Viridis
color_dict = {oriT_type: colors[i % len(colors)] for i, oriT_type in enumerate(unique_oriT_types)}

# Normalize sizes using P1_mobtyper_size (kb) and P2_mobtyper_size (kb)
non_community_0_df['size_1_norm'] = 200 * (non_community_0_df['plasmid_1_mobtyper_size'] - non_community_0_df['plasmid_1_mobtyper_size'].min()) / (non_community_0_df['plasmid_1_mobtyper_size'].max() - non_community_0_df['plasmid_1_mobtyper_size'].min()) + 50
non_community_0_df['size_2_norm'] = 200 * (non_community_0_df['plasmid_2_mobtyper_size'] - non_community_0_df['plasmid_2_mobtyper_size'].min()) / (non_community_0_df['plasmid_2_mobtyper_size'].max() - non_community_0_df['plasmid_2_mobtyper_size'].min()) + 50

# Set output folder
output_folder = 'all_oriT_interactive'
os.makedirs(output_folder, exist_ok=True)

# Legend layout settings
legend_layout = dict(x=1.05, y=0.5, bordercolor="Black", borderwidth=1)
right_margin = dict(r=150)

## PLOT 1 ##
# Create the figure for the full range plot
fig = go.Figure()

# Plot all data points for each subcommunity
for _, row in non_community_0_df.iterrows():
    if pd.isna(row['overall_SNPs']) or pd.isna(row['distance']) or pd.isna(row['size_1_norm']) or pd.isna(row['size_2_norm']):
        continue

    hover_text_2 = f"Subcommunity: {row['plasmid_2_subcommunity']}<br>oriT Type: {row['plasmid_2_mobtyper_orit_type(s)']}"
    hover_text_1 = f"Subcommunity: {row['plasmid_1_subcommunity']}<br>oriT Type: {row['plasmid_1_mobtyper_orit_type(s)']}"

    fig.add_trace(go.Scatter(
        x=[row['overall_SNPs']],
        y=[row['distance']],
        mode='markers',
        marker=dict(size=row['size_2_norm'] * 0.1, color=color_dict.get(row['plasmid_2_mobtyper_orit_type(s)'], 'grey'), symbol='triangle-up', line=dict(width=1, color='black')),
        name=row['plasmid_2_subcommunity'],
        hovertext=hover_text_2, 
        showlegend=True
    ))

    fig.add_trace(go.Scatter(
        x=[row['overall_SNPs']],
        y=[row['distance']],
        mode='markers',
        marker=dict(size=row['size_1_norm'] * 0.1, color=color_dict.get(row['plasmid_1_mobtyper_orit_type(s)'], 'grey'), symbol='circle', line=dict(width=1, color='black')),
        name=row['plasmid_1_subcommunity'],
        hovertext=hover_text_1, 
        showlegend=True
    ))
    
# Customize the plot
fig.update_layout(
    title='Scatter Plot of DCJ-indel Distance vs SNP Distance for all Subcommunities OriT Types',
    xaxis_title='SNP Distance',
    yaxis_title='DCJ-indel Distance',
    legend_title_text='OriT Types',
    legend=legend_layout,
    margin=right_margin
)

# Save the full range plot as an HTML file
full_range_html = os.path.join(output_folder, 'all_subcommunities_oriT.html')
pio.write_html(fig, file=full_range_html, auto_open=False)

## PLOT 2 ##
# Create the figure for zoomed in plot
fig = go.Figure()

# Plot all data points for each subcommunity with limited x-axis
for _, row in non_community_0_df.iterrows():
    if pd.isna(row['overall_SNPs']) or pd.isna(row['distance']) or pd.isna(row['size_1_norm']) or pd.isna(row['size_2_norm']):
        continue

    if row['overall_SNPs'] > 0.5:
        continue

    hover_text_2 = f"Subcommunity: {row['plasmid_2_subcommunity']}<br>oriT Type: {row['plasmid_2_mobtyper_orit_type(s)']}"
    hover_text_1 = f"Subcommunity: {row['plasmid_1_subcommunity']}<br>oriT Type: {row['plasmid_1_mobtyper_orit_type(s)']}"

    fig.add_trace(go.Scatter(
        x=[row['overall_SNPs']],
        y=[row['distance']],
        mode='markers',
        marker=dict(size=row['size_2_norm'] * 0.1, color=color_dict.get(row['plasmid_2_mobtyper_orit_type(s)'], 'grey'), symbol='triangle-up', line=dict(width=1, color='black')),
        name=row['plasmid_2_subcommunity'],
        hovertext=hover_text_2, 
        showlegend=True
    ))

    fig.add_trace(go.Scatter(
        x=[row['overall_SNPs']],
        y=[row['distance']],
        mode='markers',
        marker=dict(size=row['size_1_norm'] * 0.1, color=color_dict.get(row['plasmid_1_mobtyper_orit_type(s)'], 'grey'), symbol='circle', line=dict(width=1, color='black')),
        name=row['plasmid_1_subcommunity'],
        hovertext=hover_text_1, 
        showlegend=True
    ))

# Customize the plot
fig.update_layout(
    title='Scatter Plot of DCJ-indel Distance vs SNP Distance for all Subcommunities OriT Types',
    xaxis_title='SNP Distance',
    yaxis_title='DCJ-Indel Distance',
    xaxis=dict(range=[0, 0.5]),
    legend_title_text='OriT Types',
    legend=legend_layout,
    margin=right_margin
)

# Save the full range plot as an HTML file
full_range_html = os.path.join(output_folder, 'all_subcommunities_oriT_0.5.html')
pio.write_html(fig, file=full_range_html, auto_open=False)

print(f"Plots have been saved as HTML files in the '{output_folder}' directory.")
